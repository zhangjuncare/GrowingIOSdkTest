package com.growingio.android.test;

import android.os.Build;
import android.test.ActivityInstrumentationTestCase2;
import android.util.DisplayMetrics;
import android.util.Log;

import com.growingio.android.test.util.GrowingLogUtil;
import com.robotium.solo.Solo;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.List;

/**
 * Created by lishaojie on 15/12/24.
 */
public class TestActivity extends ActivityInstrumentationTestCase2<SplashActivity> {

    private static final String TAG = "SDK_TEST";
    private static final int EVENT_FIRST_VISIT = 0;
    private static final int EVENT_FIRST_PAGE = 1;
    private static final int EVENT_SPLASH_IMPRESSION = 2;
    private static final int EVENT_MAIN_PAGE_FROM_SPLASH = 3;
    private static final int EVENT_MAIN_PAGE_IMPRESSION = 4;
    private static final int EVENT_MAX_COUNT = 5;
    private Solo solo;
    private DisplayMetrics metrics;
    private List<JSONObject> events;
    private List<JSONObject> expectEvents;
    private String sessionID;
    private JSONObject mEvent;
    private JSONObject mExpect;

    public TestActivity() {
        super(SplashActivity.class);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        solo = new Solo(getInstrumentation(), getActivity());
        solo.getConfig().commandLogging = true;
        metrics = getActivity().getResources().getDisplayMetrics();
        GrowingLogUtil.init(getActivity());
        assertTrue(solo.waitForActivity(SplashActivity.class));
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
        solo = null;
    }

    public void testPrepareData() throws Exception {
        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.M) {
            // com.robotium.solo.Solo.assertCurrentActivity doesn't work on Android M
            solo.sleep(1000);
        } else {
            solo.waitForActivity(MainActivity.class);
        }
        solo.sleep(500);
        Log.i(TAG, "simulate data prepared.");
        testDataCount();
        testFirstVisitEvent();
        testFirstPageEvent();
        testSplashImpression();
        testSplashRedirectPage();
        testSplashRedirectPage();
        testMainPageImpression();
        solo.goBack();
    }

    private void testDataCount() throws Exception {
        expectEvents = GrowingLogUtil.parseLog(R.raw.app_event_flow);
        assertNotNull(expectEvents);
        assertEquals("Prepared data count must be " + EVENT_MAX_COUNT, expectEvents.size(), EVENT_MAX_COUNT);
        events = GrowingLogUtil.parseLogFile(TestApplication.sLogFilePath);
        assertNotNull(events);
        assertTrue("Data generated by SDK must be greater than " + (EVENT_MAX_COUNT-1), events.size() >= EVENT_MAX_COUNT);
    }

    private void testFirstVisitEvent() throws Exception {
        prepareDataFor(EVENT_FIRST_VISIT);
        sessionID = mEvent.getString("s");
        assertBaseInfo();
        assertStringMemberEqual("b");
        assertStringMemberEqual("ch");
    }

    private void testFirstPageEvent() throws Exception {
        prepareDataFor(EVENT_FIRST_PAGE);
        assertInSession();
        assertBaseInfo();
        assertStringMemberEqual("tl");
    }

    private void testSplashImpression() throws Exception {
        prepareDataFor(EVENT_SPLASH_IMPRESSION);
        assertInSession();
        assertBaseInfo();
        assertXPathEqual();
    }

    private void testSplashRedirectPage() throws Exception {
        prepareDataFor(EVENT_MAIN_PAGE_FROM_SPLASH);
        assertInSession();
        assertBaseInfo();
        assertStringMemberEqual("rp");
        assertStringMemberEqual("tl");
    }

    private void testMainPageImpression() throws Exception {
        prepareDataFor(EVENT_MAIN_PAGE_IMPRESSION);
        assertInSession();
        assertBaseInfo();
        assertXPathEqual();
    }

    private void assertXPathEqual() throws Exception {
        JSONArray eventXPath = mEvent.getJSONArray("e");
        JSONArray expectXPath = mExpect.getJSONArray("e");
        assertEquals(eventXPath.length(), expectXPath.length());
        for (int i = eventXPath.length() - 1; i >= 0; i--) {
            JSONObject e = eventXPath.getJSONObject(i);
            JSONObject x = expectXPath.getJSONObject(i);
            assertStringMemberEqual(e, x, "x");
            assertStringMemberEqual(e, x, "v");
            assertStringMemberEqual(e, x, "n");
            assertIntMemberEqual(e, x, "gi");
        }
    }

    private void assertIntMemberEqual(JSONObject e, JSONObject x, String member) throws JSONException {
        assertEquals(e.getInt(member), x.getInt(member));
    }

    private void assertBaseInfo() throws Exception {
        assertStringMemberEqual("p");
        assertStringMemberEqual("t");
        assertStringMemberEqual("d");
    }

    private void assertInSession() throws JSONException {
        assertEquals(sessionID, mEvent.getString("s"));
    }

    private void prepareDataFor(int index) {
        mEvent = events.get(index);
        mExpect = expectEvents.get(index);
    }

    private void assertStringMemberEqual(JSONObject o1, JSONObject o2, String member) throws Exception {
        assertEquals(o1.getString(member), o2.getString(member));
    }

    private void assertStringMemberEqual(String member) throws Exception {
        assertStringMemberEqual(mExpect, mEvent, member);
    }
}
